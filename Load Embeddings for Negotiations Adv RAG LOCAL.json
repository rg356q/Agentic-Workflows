{
  "createdAt": "2025-08-01T23:01:05.091Z",
  "updatedAt": "2025-08-03T23:10:05.000Z",
  "id": "xG14OhCaqiIQRrrQ",
  "name": "Load Embeddings for Negotiations Adv RAG LOCAL",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=<document>\n{{ $('Extract from File').item.json.data[0].content }}\n</document>\nHere is the chunk we want to situate within the whole document \n<chunk>\n{{ $json.chunk }}\n</chunk> \nPlease give a short succinct context to situate this chunk within the overall document for the purposes of improving search retrieval of the chunk. Answer only with the succinct context and nothing else. ",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        32,
        1968
      ],
      "id": "27fdf473-dd7d-413a-b814-7ff4f9d3cfe4",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "content": "# Tool to Add Files to Vector DB with Contextual Embeddings using LOCAL",
        "height": 1072,
        "width": 4032,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2288,
        1648
      ],
      "typeVersion": 1,
      "id": "e338b78e-3c45-4281-9dfe-d21ce2b2d910",
      "name": "Sticky Note2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2160,
        1984
      ],
      "id": "63d84489-601d-454c-bb5b-b1d02afbb07e",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "fileSelector": "=D:\\\\Emory\\\\AI Automation\\\\Negotiations Content\\\\bulk\\\\*.json",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -1984,
        2480
      ],
      "id": "25fb5d3c-112e-46f4-a3cc-875bbb8b585e",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1760,
        2480
      ],
      "id": "ad19e255-7d7d-4a1c-aa27-358903ec847e",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1536,
        1872
      ],
      "id": "1d66d7d2-5e99-478f-bbe9-785e2867198e",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "58a83abe-9026-4318-911f-75a96d122432",
              "leftValue": "={{ $json.data[0].content }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "55469e20-f0ba-4960-b340-4fce4c588caf",
              "leftValue": "={{ $json.data[0].content }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1312,
        1872
      ],
      "id": "d823a926-243e-4841-bd29-096260f30af1",
      "name": "Check if content exists"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT EXISTS (\n  SELECT 1\n  FROM document_metadata\n  WHERE id = '{{ $json.data[0].CleanTitle }}' AND is_complete = true\n) AS file_processing_complete;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1088,
        1872
      ],
      "id": "a8f015a0-8e9e-4633-945c-ccbc89dcb465",
      "name": "Execute a SQL query",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "H80q6n4NqPtinQNu",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "39b00378-5f07-40c4-9dc3-66f2d2de7223",
              "leftValue": "={{ $json.file_processing_complete }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -864,
        1872
      ],
      "id": "c2b156eb-038d-46c5-9c98-4266a2de3c3b",
      "name": "If"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let chunks = [];\nconst chunkSize = 2048;\nconst chunkOverlap = 0;\n\nconst text = $('Extract from File').item.json.data[0].content.replace(/\\n/, '');\n\nfor (let i=0, j=Math.round(text.length/chunkSize); i<j; i++) {\n//for (let i=0, j=Math.round(text.length/chunkSize); i<25; i++) {\n  chunks.push(\n    text.substr(\n      Math.max(0,(i * chunkSize)-chunkOverlap),\n      chunkSize\n    )\n  );\n}\n\n// Return only the first 10 items (or fewer if not enough)\n//chunks = chunks.slice(0, 2).map(chunk => ({chunk}));\n\nreturn { chunks };"
      },
      "id": "c2148129-5563-4c37-bd57-3bf8469eec93",
      "name": "Create Chunks From Doc",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -640,
        1872
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "chunks",
        "options": {
          "destinationFieldName": "chunk"
        }
      },
      "id": "13f23595-e187-4865-9cf5-4454d6aa31b9",
      "name": "Chunks To List",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -416,
        1872
      ]
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -192,
        1872
      ],
      "id": "a706ad03-bc19-4dc7-94ab-76cbc40bb1f5",
      "name": "Batch Chunks"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "069d067c-3534-4939-8ff4-34dee02a9436",
              "name": "chunk",
              "value": "={{ $('Chunks To List').item.json.chunk }}",
              "type": "string"
            },
            {
              "id": "24e01f4f-e156-47e9-a89e-9cbdccda6bd4",
              "name": "text",
              "value": "={{ $json.output }}",
              "type": "string"
            },
            {
              "id": "0b3e447c-76d7-4267-b503-426f34147377",
              "name": "file_title",
              "value": "={{ $('Extract from File').item.json.data[0].CleanTitle }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "156b095d-baaf-4a66-8365-5bf680a60774",
      "name": "Get Values",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        576,
        1856
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "embeddingBatchSize": 500,
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        864,
        1856
      ],
      "id": "ab8d4b73-891d-4f62-a783-af49ca80e1a8",
      "name": "Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "ACniCfkyK3Te0lUX",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{\n{\n  \"content\": `${ $json.text }\\n---\\n${ $json.chunk }`\n}\n}}",
        "textSplittingMode": "custom",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "file_title",
                "value": "={{ $json.file_title }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        928,
        2048
      ],
      "id": "54ca4178-d92b-4b5b-bf0b-2b05405c8b9c",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "model": "nomic-embed-text:latest"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        784,
        2064
      ],
      "id": "0160fc98-64be-4aee-b150-f9ed3ceaa9e1",
      "name": "Embeddings",
      "credentials": {
        "ollamaApi": {
          "id": "uGyv0CnMjzGVPVm2",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "chunkSize": 2000,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        928,
        2224
      ],
      "id": "58fc44ca-39f9-4745-8746-5456cca196df",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "is_complete": "={{ true }}",
            "id": "={{ $('Check if content exists').item.json.data[0].CleanTitle }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "is_complete",
              "displayName": "is_complete",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1344,
        2240
      ],
      "id": "2bfe345d-cf78-4286-881a-e95cb418107e",
      "name": "Insert or update rows in a table",
      "credentials": {
        "postgres": {
          "id": "H80q6n4NqPtinQNu",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": "granite3.3:2b",
        "options": {
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        0,
        2208
      ],
      "id": "85b67273-ae2c-4591-9452-b4c808c2fb38",
      "name": "Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "uGyv0CnMjzGVPVm2",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b257263d-2762-4173-919c-abc471f526b2",
              "leftValue": "={{ $json.output }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        416,
        1968
      ],
      "id": "b7bfe838-48b3-4f32-9561-b3d9a11f6c6c",
      "name": "Check if chunk is created"
    }
  ],
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Check if chunk is created",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Check if content exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if content exists": {
      "main": [
        [
          {
            "node": "Create Chunks From Doc",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Chunks From Doc": {
      "main": [
        [
          {
            "node": "Chunks To List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chunks To List": {
      "main": [
        [
          {
            "node": "Batch Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Batch Chunks": {
      "main": [
        [
          {
            "node": "Get Values",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Values": {
      "main": [
        [
          {
            "node": "Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store": {
      "main": [
        [
          {
            "node": "Insert or update rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings": {
      "ai_embedding": [
        [
          {
            "node": "Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Insert or update rows in a table": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Check if chunk is created": {
      "main": [
        [
          {
            "node": "Batch Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "bWh4ByaH17bDbbPx"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "6c3a18f0-afff-4d2c-ba74-254915c7a6b2",
  "triggerCount": 1,
  "tags": []
}