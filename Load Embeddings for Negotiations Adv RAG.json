{
  "createdAt": "2025-07-28T23:08:20.470Z",
  "updatedAt": "2025-08-03T23:09:55.000Z",
  "id": "NapwbC5MZS5H1A7J",
  "name": "Load Embeddings for Negotiations Adv RAG",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "content": "## Run Each Node Once to Set Up Database Tables",
        "height": 300,
        "width": 680,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2304,
        -240
      ],
      "typeVersion": 1,
      "id": "3ee7410f-2316-45a3-92da-136f6c1d748f",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE document_metadata (\n    id TEXT PRIMARY KEY,\n    title TEXT,\n    url TEXT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    schema TEXT,\n    is_complete boolean null default false\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -2016,
        -176
      ],
      "id": "73f98e94-31e7-4a8f-b58f-9472f014a5e3",
      "name": "Create Document Metadata Table",
      "credentials": {
        "postgres": {
          "id": "H80q6n4NqPtinQNu",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE document_rows (\n    id SERIAL PRIMARY KEY,\n    --dataset_id TEXT REFERENCES document_metadata(id),\n    dataset_id TEXT,\n    row_data JSONB  -- Store the actual row data\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1792,
        -176
      ],
      "id": "73a10ba0-da45-45b3-93ff-9289e097e943",
      "name": "Create Document Rows Table (for Tabular Data)",
      "credentials": {
        "postgres": {
          "id": "H80q6n4NqPtinQNu",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Enable the pgvector extension to work with embedding vectors\n--create extension vector;\n\n-- Create a table to store your documents\ncreate table documents (\n  id bigserial primary key,\n  content text, -- corresponds to Document.pageContent\n  metadata jsonb, -- corresponds to Document.metadata\n  fts tsvector generated always as (to_tsvector('english', content)) stored,\n  embedding vector(768) -- 1536 works for OpenAI embeddings, change if needed\n);\n\n-- Create an index for the full-text search\ncreate index on documents using gin(fts);\n\n-- Create an index for the semantic vector search\ncreate index on documents using hnsw (embedding vector_ip_ops);  \n\n-- Create a function to search for documents\ncreate or replace function hybrid_search(\n  query_text text,\n  query_embedding vector(768),\n  match_count int,\n  full_text_weight float = 1,\n  semantic_weight float = 1,\n  filter jsonb DEFAULT '{}',\n  rrf_k int = 50\n)\nreturns setof documents\nlanguage sql\nas $$\nwith full_text as (\n  select\n    id,\n    -- Note: ts_rank_cd is not indexable but will only rank matches of the where clause\n    -- which shouldn't be too big\n    row_number() over(order by ts_rank_cd(fts, websearch_to_tsquery(query_text)) desc) as rank_ix\n  from\n    documents\n  where\n    fts @@ websearch_to_tsquery(query_text)\n  order by rank_ix\n  limit least(match_count, 30) * 2\n),\nsemantic as (\n  select\n    id,\n    row_number() over (order by embedding <#> query_embedding) as rank_ix\n  from\n    documents\n  order by rank_ix\n  limit least(match_count, 30) * 2\n)\nselect\n  documents.*\nfrom\n  full_text\n  full outer join semantic\n    on full_text.id = semantic.id\n  join documents\n    on coalesce(full_text.id, semantic.id) = documents.id\norder by\n  coalesce(1.0 / (rrf_k + full_text.rank_ix), 0.0) * full_text_weight +\n  coalesce(1.0 / (rrf_k + semantic.rank_ix), 0.0) * semantic_weight\n  desc\nlimit\n  least(match_count, 30)\n$$;\n\n-- Create a function to search for documents\ncreate function match_documents (\n  query_embedding vector(1536),\n  match_count int default null,\n  filter jsonb DEFAULT '{}'\n) returns table (\n  id bigint,\n  content text,\n  metadata jsonb,\n  similarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_column\nbegin\n  return query\n  select\n    id,\n    content,\n    metadata,\n    1 - (documents.embedding <=> query_embedding) as similarity\n  from documents\n  where metadata @> filter\n  order by documents.embedding <=> query_embedding\n  limit match_count;\nend;\n$$;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -2240,
        -176
      ],
      "id": "2d250e8c-9a1b-4870-b4d1-6938cbc5b673",
      "name": "Create Documents Table and Match Function",
      "credentials": {
        "postgres": {
          "id": "H80q6n4NqPtinQNu",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "fileSelector": "=D:\\\\Emory\\\\AI Automation\\\\Negotiations Content\\\\*.json",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -2016,
        1184
      ],
      "id": "2d47b58b-cc81-44de-877b-a88a3f8f6fbb",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2208,
        752
      ],
      "id": "50a5d06d-05dd-49d4-bf00-5ce39c3d56b2",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1792,
        1184
      ],
      "id": "6c0cdc4c-1158-44f7-8771-efb7f82112cc",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1568,
        576
      ],
      "id": "d71c016c-f005-4724-89f1-d7194197f1ec",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const chunks = [];\nconst chunkSize = 400;\nconst chunkOverlap = 0;\n\nconst text = $('Extract from File').item.json.data[0].content.replace(/\\n/, '');\n\nfor (let i=0, j=Math.round(text.length/chunkSize); i<j; i++) {\n  chunks.push(\n    text.substr(\n      Math.max(0,(i * chunkSize)-chunkOverlap),\n      chunkSize\n    )\n  );\n}\n\nreturn { chunks };"
      },
      "id": "b0328708-42db-4f88-a77e-4d56a425d33c",
      "name": "Create Chunks From Doc",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -672,
        576
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "chunks",
        "options": {
          "destinationFieldName": "chunk"
        }
      },
      "id": "17d489d4-adbf-4c1d-81e9-a99a63172220",
      "name": "Chunks To List",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -448,
        576
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "069d067c-3534-4939-8ff4-34dee02a9436",
              "name": "chunk",
              "value": "={{ $('Chunks To List').item.json.chunk }}",
              "type": "string"
            },
            {
              "id": "24e01f4f-e156-47e9-a89e-9cbdccda6bd4",
              "name": "text",
              "value": "={{ $('Message a model').item.json.choices[0].message.content }}",
              "type": "string"
            },
            {
              "id": "0b3e447c-76d7-4267-b503-426f34147377",
              "name": "file_title",
              "value": "={{ $('Extract from File').item.json.data[0].CleanTitle }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "5b832361-4d53-49d6-a31f-0de3e662f0ae",
      "name": "Get Values",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -64,
        816
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "embeddingBatchSize": 500,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        672,
        816
      ],
      "id": "13987924-26fc-47f4-b90b-a9ccda872868",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "ACniCfkyK3Te0lUX",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "model": "nomic-embed-text:latest"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        656,
        1040
      ],
      "id": "9885a553-b16b-43d6-ae2d-964b5d5f9fa0",
      "name": "Embeddings Ollama",
      "credentials": {
        "ollamaApi": {
          "id": "uGyv0CnMjzGVPVm2",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{\n{\n  \"content\": `${ $json.text }\\n---\\n${ $json.chunk }`\n}\n}}",
        "textSplittingMode": "custom",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "file_title",
                "value": "={{ $json.file_title }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        816,
        1024
      ],
      "id": "debff79c-daaa-4586-bd22-842e7c3df70f",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkSize": 2000,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        704,
        1216
      ],
      "id": "44f41f85-04b7-42c3-b9cf-a9a2830d4113",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "39b00378-5f07-40c4-9dc3-66f2d2de7223",
              "leftValue": "={{ $json.file_processing_complete }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -896,
        576
      ],
      "id": "6256a9e0-8509-42cf-b1af-7c02d1499181",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT EXISTS (\n  SELECT 1\n  FROM document_metadata\n  WHERE id = '{{ $json.data[0].CleanTitle }}' AND is_complete = true\n) AS file_processing_complete;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1120,
        576
      ],
      "id": "75ab079c-2e55-4f0a-a2a4-ad29eccb992a",
      "name": "Execute a SQL query",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "H80q6n4NqPtinQNu",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "is_complete": "={{ true }}",
            "id": "={{ $('Check if content exists').item.json.data[0].CleanTitle }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "is_complete",
              "displayName": "is_complete",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1392,
        1008
      ],
      "id": "006956f8-ead8-4b43-9dd3-d4e19471ed65",
      "name": "Insert or update rows in a table",
      "credentials": {
        "postgres": {
          "id": "H80q6n4NqPtinQNu",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "58a83abe-9026-4318-911f-75a96d122432",
              "leftValue": "={{ $json.data[0].content }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "55469e20-f0ba-4960-b340-4fce4c588caf",
              "leftValue": "={{ $json.data[0].content }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1344,
        576
      ],
      "id": "42112c17-0b25-4a1e-afd8-666068d9e4e1",
      "name": "Check if content exists"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -224,
        576
      ],
      "id": "f2a34ccf-e1b2-456d-983c-c69e2af219cc",
      "name": "Batch Chunks"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-nano-2025-04-14",
          "mode": "list",
          "cachedResultName": "GPT-4.1-NANO-2025-04-14"
        },
        "messages": {
          "values": [
            {
              "content": "=<document>\n{{ $('Extract from File').item.json.data[0].content }}\n</document>\nHere is the chunk we want to situate within the whole document \n<chunk>\n{{ $('Batch Chunks').item.json.chunk }}\n</chunk> \nPlease give a short succinct context to situate this chunk within the overall document for the purposes of improving search retrieval of the chunk. Answer only with the succinct context and nothing else. "
            }
          ]
        },
        "simplify": false,
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1088,
        416
      ],
      "id": "550b9632-acc4-4a3b-ba7a-13d39c31355e",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "2Z9Rn8vgw8FQe5w3",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const tokensPerMinLimit = 200000;\nconst bufferToLeaveTokensToConsumeInAMin = 21729;\n\nlet pause = false;\nlet timeIntervalToPause = 0;\nlet isWithinLimits = false;\nlet tokensRemaining = 0;\nconst workflowStaticData = $getWorkflowStaticData('global');\n\nlet tokensUsedInThisMin = workflowStaticData.tokensUsedInThisMin;\n\nif ( tokensUsedInThisMin && tokensUsedInThisMin > 0 ) {\n  \n  tokensRemaining = (tokensPerMinLimit - tokensUsedInThisMin);\n\n  if ( tokensRemaining >= bufferToLeaveTokensToConsumeInAMin ) {\n    pause = false;\n  } else {\n    pause = true;\n  }\n}\n\nconsole.log('tokensUsedInThisMin :: ', tokensUsedInThisMin, ' :: tokensRemaining :: ', tokensRemaining);\n\nif ( pause ) {\n  \n  isWithinLimits = false;\n  timeIntervalToPause = 60;\n\n  /*\n  // Parse the timestamps\n  const lastResetTime = workflowStaticData.lastResetTime;\n  const last = new Date(lastResetTime).getTime();\n  //const now = $now.toISO().toString();\n  const current = (new Date()).getTime();\n  // Calculate the difference in seconds\n  timeIntervalToPause = Math.ceil((current - last) / 1000);\n  */\n  \n} else {\n  isWithinLimits = true;\n  timeIntervalToPause = 0;\n}\n\nreturn {\n      isWithinLimits: isWithinLimits,\n      timeIntervalToPause: timeIntervalToPause\n  };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        32,
        432
      ],
      "id": "43534a76-7dca-4b18-974e-6b557014ecda",
      "name": "Check Token Usage"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const workflowStaticData = $getWorkflowStaticData('global');\nconst tokensInThisRun = $json.usage.total_tokens;\n\nlet tokensUsedInThisMin = workflowStaticData.tokensUsedInThisMin;\n\nif ( tokensUsedInThisMin && tokensUsedInThisMin > 0 ) {\n  workflowStaticData.tokensUsedInThisMin = tokensUsedInThisMin + tokensInThisRun;\n} else {\n  workflowStaticData.tokensUsedInThisMin = tokensInThisRun;\n}\n\nreturn {};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1504,
        576
      ],
      "id": "6c843a4b-7df1-43ec-b2e7-3559c051a1ed",
      "name": "Set Token Usage"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "77536987-bae2-4f4b-95b6-658d82a561c1",
              "leftValue": "={{ $json.isWithinLimits }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        368,
        432
      ],
      "id": "adb79562-cb7f-4dfa-aa58-675a1d0c3ee8",
      "name": "Within Limits"
    },
    {
      "parameters": {
        "amount": "={{ $json.timeIntervalToPause }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        608,
        560
      ],
      "id": "d1fa1d3f-d40c-4a30-a617-6c40da04a44e",
      "name": "Pause For TPM to reset",
      "webhookId": "e9fcb32e-6e87-4a45-ac23-bcdbf6032c7e"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const workflowStaticData = $getWorkflowStaticData('global');\n\nworkflowStaticData.lastResetTime = $now.toISO().toString();\nworkflowStaticData.tokensUsedInThisMin = 0;\n\nconsole.log(' workflowStaticData.lastResetTime :: ', workflowStaticData.lastResetTime, )\n\nreturn {};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        832,
        560
      ],
      "id": "437988cb-2183-4364-8a38-39067544504e",
      "name": "Reset TPM"
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        80,
        944
      ],
      "id": "94d883b1-950d-4eae-bf92-82f716931506",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=D:\\\\Emory\\\\AI Automation\\\\Negotiations Content\\\\bkup\\\\LLMOutput.json",
        "options": {
          "append": true
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        240,
        944
      ],
      "id": "fdde54e7-fe69-4315-a768-d0f324d3e5ed",
      "name": "Read/Write Files from Disk1",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        448,
        944
      ],
      "id": "8c589084-e574-4312-aec8-8e55489ed3b9",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "content": "# Tool to Add Files to Vector DB with Contextual Embeddings using OpenAI",
        "height": 1072,
        "width": 4032,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2320,
        352
      ],
      "typeVersion": 1,
      "id": "55d0fe4b-67f4-4f45-9dc6-c78692b5af16",
      "name": "Sticky Note1"
    }
  ],
  "connections": {
    "Create Document Metadata Table": {
      "main": [
        [
          {
            "node": "Create Document Rows Table (for Tabular Data)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Documents Table and Match Function": {
      "main": [
        [
          {
            "node": "Create Document Metadata Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        []
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Check if content exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Chunks From Doc": {
      "main": [
        [
          {
            "node": "Chunks To List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chunks To List": {
      "main": [
        [
          {
            "node": "Batch Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Values": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Ollama": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "main": [
        [
          {
            "node": "Insert or update rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Create Chunks From Doc",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert or update rows in a table": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if content exists": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Batch Chunks": {
      "main": [
        [
          {
            "node": "Get Values",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Token Usage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Token Usage": {
      "main": [
        [
          {
            "node": "Within Limits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Set Token Usage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Within Limits": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Pause For TPM to reset",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pause For TPM to reset": {
      "main": [
        [
          {
            "node": "Reset TPM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Token Usage": {
      "main": [
        [
          {
            "node": "Batch Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reset TPM": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk1": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "bWh4ByaH17bDbbPx"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "1d45c4d9-7824-4f55-bc63-8b9aff61bff1",
  "triggerCount": 1,
  "tags": []
}